#!/usr/bin/env node
const yaml = require('js-yaml')
const fs = require('fs')
const childProcess = require('child_process')
const path = require('path')
const colorSchemeFile = path.join(__dirname, 'gruvbox/colors.yml')
const swaySchemeFile = path.join(__dirname, 'gruvbox/sway.yml')
const sourceConfigFile = path.join(__dirname, 'configs/source-sway.config')
const destinationConfigFile = path.join(__dirname, `configs/sway.config`)
const theme = process.argv[2] || 'dark'

function loadYaml(yamlFile) {
	try {
		return yaml.safeLoad(fs.readFileSync(yamlFile, { encoding: 'utf8' }))
	} catch (e) {
		console.error(`Error while loading ${yamlFile}`)
		throw e
	}
}

const colorScheme = loadYaml(colorSchemeFile).colors
const swayScheme = loadYaml(swaySchemeFile)
const newSwayColors = swayScheme[theme]
const swayConfig = fs.readFileSync(sourceConfigFile, { encoding: 'utf8' })

const colorVariableList = Object.keys(newSwayColors).reduce((list, variableName) => {
	const schemeColorName = newSwayColors[variableName]
	list.push([variableName, colorScheme[schemeColorName]])
	return list
}, [])

const newSwayConfig = [
	`# DO NOT EDIT THIS FILE DIRECTLY! IT'S GENERATED FROM ${sourceConfigFile}, EDIT IT THERE`,
	...colorVariableList.map(([ variableName, color ]) => {
		return `set $${variableName} ${color}`
	}),
	swayConfig.split('# -- THEME MARKER -- #')[1]
].join('\n')

fs.writeFileSync(destinationConfigFile, newSwayConfig, { encoding: 'utf8' })

if (process.env.SWAYSOCK) {
	const tmpConfigFile = destinationConfigFile + `-${Date.now()}`
	fs.copyFileSync(destinationConfigFile, tmpConfigFile)
	childProcess.execSync(`swaymsg include ${tmpConfigFile}`)
	fs.unlinkSync(tmpConfigFile)
}
